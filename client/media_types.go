// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "pos": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/psavelis/goa-pos-poc/design
// --out=c:\code\src\github.com\psavelis\goa-pos-poc
// --version=v1.3.0

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"unicode/utf8"
)

// Purchase media type (default view)
//
// Identifier: vnd.application/pos.purchases; view=default
type Purchase struct {
	// Operation reference code
	Locator string `form:"Locator" json:"Locator" xml:"Locator"`
	// Total amount paid
	PurchaseValue float64 `form:"PurchaseValue" json:"PurchaseValue" xml:"PurchaseValue"`
	// Unique transaction identifier
	TransactionID string `form:"TransactionId" json:"TransactionId" xml:"TransactionId"`
}

// Validate validates the Purchase media type instance.
func (mt *Purchase) Validate() (err error) {
	if mt.TransactionID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "TransactionId"))
	}
	if mt.Locator == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "Locator"))
	}

	if utf8.RuneCountInString(mt.Locator) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.Locator`, mt.Locator, utf8.RuneCountInString(mt.Locator), 1, true))
	}
	if utf8.RuneCountInString(mt.Locator) > 30 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.Locator`, mt.Locator, utf8.RuneCountInString(mt.Locator), 30, false))
	}
	if mt.PurchaseValue < 0.010000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.PurchaseValue`, mt.PurchaseValue, 0.010000, true))
	}
	return
}

// DecodePurchase decodes the Purchase instance encoded in resp body.
func (c *Client) DecodePurchase(resp *http.Response) (*Purchase, error) {
	var decoded Purchase
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
